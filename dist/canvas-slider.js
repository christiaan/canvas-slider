(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var CanvasViewport, axisFitOnCanvas;

CanvasViewport = (function() {
  function CanvasViewport(node, images) {
    this.node = node;
    this.images = images;
    this.context = this.node.getContext('2d');
    this._setPosition(0);
  }

  CanvasViewport.prototype.render = function(x) {
    this._setPosition(x);
    this.context.clearRect(0, 0, this.node.width, this.node.height);
    return this.images.forEach((function(_this) {
      return function(image) {
        return image.draw(_this);
      };
    })(this));
  };

  CanvasViewport.prototype.drawImage = function(image, x, y) {
    var height, ref, ref1, sx, sy, width;
    x -= this.position;
    ref = axisFitOnCanvas(x, image.width, this.node.width), x = ref[0], width = ref[1], sx = ref[2];
    ref1 = axisFitOnCanvas(y, image.height, this.node.height), y = ref1[0], height = ref1[1], sy = ref1[2];
    if (width === 0 || height === 0) {
      return;
    }
    this.context.drawImage(image, sx, sy, width, height, x, y, width, height);
  };

  CanvasViewport.prototype._setPosition = function(position) {
    position = Math.min(position, this.node.width * (this.images.length - 1));
    position = Math.max(0, position);
    return this.position = position;
  };

  return CanvasViewport;

})();

axisFitOnCanvas = function(position, size, available) {
  var overdue, sourcePosition;
  sourcePosition = 0;
  if (position + size < 0) {
    size = 0;
  } else if (position < 0) {
    overdue = 0 - position;
    size -= overdue;
    sourcePosition += overdue;
    position = 0;
  } else if (position > available) {
    size = 0;
  } else if (position + size > available) {
    size = available - position;
  }
  return [position, size, sourcePosition];
};

module.exports = CanvasViewport;



},{}],2:[function(require,module,exports){
var Image;

Image = (function() {
  function Image(node, x, y) {
    this.node = node;
    this.x = x;
    this.y = y;
  }

  Image.prototype.draw = function(viewport) {
    return viewport.drawImage(this.node, this.x, this.y);
  };

  return Image;

})();

module.exports = Image;



},{}],3:[function(require,module,exports){
var CanvasViewport, Image, centered, dragHandler, getImages;

CanvasViewport = require('./CanvasViewport');

dragHandler = require('./dragHandler');

Image = require('./Image');

module.exports = function(node) {
  var images, viewport;
  images = getImages(node);
  viewport = new CanvasViewport(node, images);
  viewport.render(0);
  return dragHandler(node, node.ownerDocument, function(movement) {
    return viewport.render(viewport.position - movement);
  });
};

getImages = function(node) {
  return Array.prototype.map.call(node.children, function(image, index) {
    var x, y;
    x = (index * node.width) + centered(image.width, node.width);
    y = centered(image.height, node.height);
    return new Image(image, x, y);
  });
};

centered = function(size, available) {
  var short;
  short = available - size;
  if (short <= 0) {
    return 0;
  } else {
    return Math.floor(short / 2);
  }
};



},{"./CanvasViewport":1,"./Image":2,"./dragHandler":4}],4:[function(require,module,exports){
var dragHandler;

dragHandler = function(node, parentNode, cb) {
  var position, reportMovement;
  position = 0;
  node.addEventListener('mousedown', function(e) {
    parentNode.addEventListener('mousemove', reportMovement);
    node.classList.add('dragging');
    position = e.clientX;
  });
  parentNode.addEventListener('mouseup', function() {
    parentNode.removeEventListener('mousemove', reportMovement);
    node.classList.remove('dragging');
  });
  return reportMovement = function(e) {
    var movement;
    movement = e.clientX - position;
    position = e.clientX;
    cb(movement);
  };
};

module.exports = dragHandler;



},{}],5:[function(require,module,exports){
var canvasSlider;

canvasSlider = require('./canvasSlider');

window.onload = function() {
  var nodes;
  nodes = document.getElementsByClassName('slider');
  return Array.prototype.forEach.call(nodes, canvasSlider);
};



},{"./canvasSlider":3}]},{},[5])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9jaHJpc3RpYWFuL3RtcC9jYW52YXMtc2xpZGVyL3NyYy9DYW52YXNWaWV3cG9ydC5jb2ZmZWUiLCIvaG9tZS9jaHJpc3RpYWFuL3RtcC9jYW52YXMtc2xpZGVyL3NyYy9JbWFnZS5jb2ZmZWUiLCIvaG9tZS9jaHJpc3RpYWFuL3RtcC9jYW52YXMtc2xpZGVyL3NyYy9jYW52YXNTbGlkZXIuY29mZmVlIiwiL2hvbWUvY2hyaXN0aWFhbi90bXAvY2FudmFzLXNsaWRlci9zcmMvZHJhZ0hhbmRsZXIuY29mZmVlIiwiL2hvbWUvY2hyaXN0aWFhbi90bXAvY2FudmFzLXNsaWRlci9zcmMvaW5kZXguY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUEsSUFBQSwrQkFBQTs7QUFBQTtBQUNlLEVBQUEsd0JBQUMsSUFBRCxFQUFRLE1BQVIsR0FBQTtBQUNYLElBRFksSUFBQyxDQUFBLE9BQUQsSUFDWixDQUFBO0FBQUEsSUFEbUIsSUFBQyxDQUFBLFNBQUQsTUFDbkIsQ0FBQTtBQUFBLElBQUEsSUFBQyxDQUFBLE9BQUQsR0FBVyxJQUFDLENBQUEsSUFBSSxDQUFDLFVBQU4sQ0FBaUIsSUFBakIsQ0FBWCxDQUFBO0FBQUEsSUFDQSxJQUFDLENBQUEsWUFBRCxDQUFjLENBQWQsQ0FEQSxDQURXO0VBQUEsQ0FBYjs7QUFBQSwyQkFJQSxNQUFBLEdBQVEsU0FBQyxDQUFELEdBQUE7QUFDTixJQUFBLElBQUMsQ0FBQSxZQUFELENBQWMsQ0FBZCxDQUFBLENBQUE7QUFBQSxJQUNBLElBQUMsQ0FBQSxPQUFPLENBQUMsU0FBVCxDQUFtQixDQUFuQixFQUFzQixDQUF0QixFQUF5QixJQUFDLENBQUEsSUFBSSxDQUFDLEtBQS9CLEVBQXNDLElBQUMsQ0FBQSxJQUFJLENBQUMsTUFBNUMsQ0FEQSxDQUFBO1dBRUEsSUFBQyxDQUFB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QUEsR0FBQTtBQUNyQyxJQUFBLFVBQVUsQ0FBQyxtQkFBWCxDQUErQixXQUEvQixFQUE0QyxjQUE1QyxDQUFBLENBQUE7QUFBQSxJQUNBLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBZixDQUFzQixVQUF0QixDQURBLENBRHFDO0VBQUEsQ0FBdkMsQ0FQQSxDQUFBO1NBWUEsY0FBQSxHQUFpQixTQUFDLENBQUQsR0FBQTtBQUNmLFFBQUEsUUFBQTtBQUFBLElBQUEsUUFBQSxHQUFXLENBQUMsQ0FBQyxPQUFGLEdBQVksUUFBdkIsQ0FBQTtBQUFBLElBQ0EsUUFBQSxHQUFXLENBQUMsQ0FBQyxPQURiLENBQUE7QUFBQSxJQUVBLEVBQUEsQ0FBRyxRQUFILENBRkEsQ0FEZTtFQUFBLEVBYlA7QUFBQSxDQUFkLENBQUE7O0FBQUEsTUFtQk0sQ0FBQyxPQUFQLEdBQWlCLFdBbkJqQixDQUFBOzs7OztBQ0FBLElBQUEsWUFBQTs7QUFBQSxZQUFBLEdBQWUsT0FBQSxDQUFRLGdCQUFSLENBQWYsQ0FBQTs7QUFBQSxNQUVNLENBQUMsTUFBUCxHQUFnQixTQUFBLEdBQUE7QUFDZCxNQUFBLEtBQUE7QUFBQSxFQUFBLEtBQUEsR0FBUSxRQUFRLENBQUMsc0JBQVQsQ0FBZ0MsUUFBaEMsQ0FBUixDQUFBO1NBQ0EsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBeEIsQ0FBNkIsS0FBN0IsRUFBb0MsWUFBcEMsRUFGYztBQUFBLENBRmhCLENBQUEiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiY2xhc3MgQ2FudmFzVmlld3BvcnRcbiAgY29uc3RydWN0b3I6IChAbm9kZSwgQGltYWdlcyktPlxuICAgIEBjb250ZXh0ID0gQG5vZGUuZ2V0Q29udGV4dCAnMmQnXG4gICAgQF9zZXRQb3NpdGlvbiAwXG5cbiAgcmVuZGVyOiAoeCktPlxuICAgIEBfc2V0UG9zaXRpb24geFxuICAgIEBjb250ZXh0LmNsZWFyUmVjdCAwLCAwLCBAbm9kZS53aWR0aCwgQG5vZGUuaGVpZ2h0XG4gICAgQGltYWdlcy5mb3JFYWNoIChpbWFnZSk9PiBpbWFnZS5kcmF3KHRoaXMpXG5cbiAgZHJhd0ltYWdlOiAoaW1hZ2UsIHgsIHkpLT5cbiAgICB4IC09IEBwb3NpdGlvblxuICAgIFt4LCB3aWR0aCwgc3hdID0gYXhpc0ZpdE9uQ2FudmFzKHgsIGltYWdlLndpZHRoLCBAbm9kZS53aWR0aClcbiAgICBbeSwgaGVpZ2h0LCBzeV0gPSBheGlzRml0T25DYW52YXMoeSwgaW1hZ2UuaGVpZ2h0LCBAbm9kZS5oZWlnaHQpXG4gICAgcmV0dXJuIGlmIHdpZHRoID09IDAgb3IgaGVpZ2h0ID09IDBcblxuICAgICMgZHJhd0ltYWdlKGltYWdlLCBzeCwgc3ksIHNXaWR0aCwgc0hlaWdodCwgZHgsIGR5LCBkV2lkdGgsIGRIZWlnaHQpXG4gICAgQGNvbnRleHQuZHJhd0ltYWdlKGltYWdlLCBzeCwgc3ksIHdpZHRoLCBoZWlnaHQsIHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgIHJldHVyblxuXG4gIF9zZXRQb3NpdGlvbjogKHBvc2l0aW9uKS0+XG4gICAgcG9zaXRpb24gPSBNYXRoLm1pbiBwb3NpdGlvbiwgQG5vZGUud2lkdGggKiAoQGltYWdlcy5sZW5ndGggLSAxKVxuICAgIHBvc2l0aW9uID0gTWF0aC5tYXggMCwgcG9zaXRpb25cbiAgICBAcG9zaXRpb24gPSBwb3NpdGlvblxuXG5heGlzRml0T25DYW52YXMgPSAocG9zaXRpb24sIHNpemUsIGF2YWlsYWJsZSktPlxuICBzb3VyY2VQb3NpdGlvbiA9IDBcbiAgaWYgcG9zaXRpb24gKyBzaXplIDwgMFxuICAgIHNpemUgPSAwXG4gIGVsc2UgaWYgcG9zaXRpb24gPCAwXG4gICAgb3ZlcmR1ZSA9IDAgLSBwb3NpdGlvblxuICAgIHNpemUgLT0gb3ZlcmR1ZVxuICAgIHNvdXJjZVBvc2l0aW9uICs9IG92ZXJkdWVcbiAgICBwb3NpdGlvbiA9IDBcbiAgZWxzZSBpZiBwb3NpdGlvbiA+IGF2YWlsYWJsZVxuICAgIHNpemUgPSAwXG4gIGVsc2UgaWYgcG9zaXRpb24gKyBzaXplID4gYXZhaWxhYmxlXG4gICAgc2l6ZSA9IGF2YWlsYWJsZSAtIHBvc2l0aW9uXG5cbiAgW3Bvc2l0aW9uLCBzaXplLCBzb3VyY2VQb3NpdGlvbl1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IENhbnZhc1ZpZXdwb3J0XG4iLCJjbGFzcyBJbWFnZVxuICBjb25zdHJ1Y3RvcjogKEBub2RlLCBAeCwgQHkpLT5cblxuICBkcmF3OiAodmlld3BvcnQpLT5cbiAgICB2aWV3cG9ydC5kcmF3SW1hZ2UoQG5vZGUsIEB4LCBAeSlcblxubW9kdWxlLmV4cG9ydHMgPSBJbWFnZVxuIiwiQ2FudmFzVmlld3BvcnQgPSByZXF1aXJlICcuL0NhbnZhc1ZpZXdwb3J0J1xuZHJhZ0hhbmRsZXIgPSByZXF1aXJlICcuL2RyYWdIYW5kbGVyJ1xuSW1hZ2UgPSByZXF1aXJlICcuL0ltYWdlJ1xuXG5tb2R1bGUuZXhwb3J0cyA9IChub2RlKS0+XG4gIGltYWdlcyA9IGdldEltYWdlcyBub2RlXG5cbiAgdmlld3BvcnQgPSBuZXcgQ2FudmFzVmlld3BvcnQobm9kZSwgaW1hZ2VzKVxuXG4gIHZpZXdwb3J0LnJlbmRlciAwXG5cbiAgZHJhZ0hhbmRsZXIgbm9kZSwgbm9kZS5vd25lckRvY3VtZW50LCAobW92ZW1lbnQpLT5cbiAgICB2aWV3cG9ydC5yZW5kZXIgdmlld3BvcnQucG9zaXRpb24gLSBtb3ZlbWVudFxuXG5nZXRJbWFnZXMgPSAobm9kZSktPlxuICBBcnJheS5wcm90b3R5cGUubWFwLmNhbGwgbm9kZS5jaGlsZHJlbiwgKGltYWdlLCBpbmRleCktPlxuICAgIHggPSAoaW5kZXggKiBub2RlLndpZHRoKSArIGNlbnRlcmVkKGltYWdlLndpZHRoLCBub2RlLndpZHRoKVxuICAgIHkgPSBjZW50ZXJlZChpbWFnZS5oZWlnaHQsIG5vZGUuaGVpZ2h0KVxuICAgIG5ldyBJbWFnZShpbWFnZSwgeCwgeSlcblxuY2VudGVyZWQgPSAoc2l6ZSwgYXZhaWxhYmxlKS0+XG4gIHNob3J0ID0gYXZhaWxhYmxlIC0gc2l6ZVxuICBpZiBzaG9ydCA8PSAwIHRoZW4gMCBlbHNlIE1hdGguZmxvb3Ioc2hvcnQgLyAyKVxuIiwiZHJhZ0hhbmRsZXIgPSAobm9kZSwgcGFyZW50Tm9kZSwgY2IpLT5cbiAgICBwb3NpdGlvbiA9IDBcbiAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIgJ21vdXNlZG93bicsIChlKS0+XG4gICAgICBwYXJlbnROb2RlLmFkZEV2ZW50TGlzdGVuZXIgJ21vdXNlbW92ZScsIHJlcG9ydE1vdmVtZW50XG4gICAgICBub2RlLmNsYXNzTGlzdC5hZGQgJ2RyYWdnaW5nJ1xuICAgICAgcG9zaXRpb24gPSBlLmNsaWVudFhcbiAgICAgIHJldHVyblxuXG4gICAgcGFyZW50Tm9kZS5hZGRFdmVudExpc3RlbmVyICdtb3VzZXVwJywgLT5cbiAgICAgIHBhcmVudE5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lciAnbW91c2Vtb3ZlJywgcmVwb3J0TW92ZW1lbnRcbiAgICAgIG5vZGUuY2xhc3NMaXN0LnJlbW92ZSAnZHJhZ2dpbmcnXG4gICAgICByZXR1cm5cblxuICAgIHJlcG9ydE1vdmVtZW50ID0gKGUpLT5cbiAgICAgIG1vdmVtZW50ID0gZS5jbGllbnRYIC0gcG9zaXRpb25cbiAgICAgIHBvc2l0aW9uID0gZS5jbGllbnRYXG4gICAgICBjYiBtb3ZlbWVudFxuICAgICAgcmV0dXJuXG5cbm1vZHVsZS5leHBvcnRzID0gZHJhZ0hhbmRsZXJcbiIsImNhbnZhc1NsaWRlciA9IHJlcXVpcmUgJy4vY2FudmFzU2xpZGVyJ1xuXG53aW5kb3cub25sb2FkID0gLT5cbiAgbm9kZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdzbGlkZXInKVxuICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsIG5vZGVzLCBjYW52YXNTbGlkZXJcblxuIl19

(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var CanvasSlider, axisFitOnCanvas;

CanvasSlider = (function() {
  function CanvasSlider(node, images) {
    this.node = node;
    this.images = images;
    this.context = this.node.getContext('2d');
  }

  CanvasSlider.prototype.render = function(x) {
    x = Math.max(0, Math.min(x, this.node.width * (this.images.length - 1)));
    this.context.fillStyle = 'pink';
    this.context.fillRect(0, 0, this.node.width, this.node.height);
    return this.images.forEach((function(_this) {
      return function(image) {
        return _this._drawImage(image.node, image.x - x, image.y);
      };
    })(this));
  };

  CanvasSlider.prototype._drawImage = function(image, x, y) {
    var height, ref, ref1, sx, sy, width;
    ref = axisFitOnCanvas(x, image.width, this.node.width), x = ref[0], width = ref[1], sx = ref[2];
    ref1 = axisFitOnCanvas(y, image.height, this.node.height), y = ref1[0], height = ref1[1], sy = ref1[2];
    if (width === 0 || height === 0) {
      return;
    }
    this.context.drawImage(image, sx, sy, width, height, x, y, width, height);
  };

  return CanvasSlider;

})();

axisFitOnCanvas = function(position, size, available) {
  var overdue, sourcePosition;
  sourcePosition = 0;
  if (position + size < 0) {
    size = 0;
  } else if (position < 0) {
    overdue = 0 - position;
    size -= overdue;
    sourcePosition += overdue;
    position = 0;
  } else if (position > available) {
    size = 0;
  } else if (position + size > available) {
    size = available - position;
  }
  return [position, size, sourcePosition];
};

module.exports = CanvasSlider;



},{}],2:[function(require,module,exports){
var CanvasSlider, canvasSlider, centered;

CanvasSlider = require('./CanvasSlider');

canvasSlider = window.canvasSlider || {};

canvasSlider.createFrom = function(node) {
  var images;
  images = Array.prototype.map.call(node.children, function(image, index) {
    return {
      node: image,
      x: (index * node.width) + centered(image.width, node.width),
      y: centered(image.height, node.height)
    };
  });
  return new CanvasSlider(node, images);
};

window.canvasSlider = canvasSlider;

centered = function(size, available) {
  var short;
  short = available - size;
  if (short <= 0) {
    return 0;
  }
  return Math.floor(short / 2);
};



},{"./CanvasSlider":1}]},{},[2])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9jaHJpc3RpYWFuL3RtcC9jYW52YXMtc2xpZGVyL3NyYy9DYW52YXNTbGlkZXIuY29mZmVlIiwiL2hvbWUvY2hyaXN0aWFhbi90bXAvY2FudmFzLXNsaWRlci9zcmMvaW5kZXguY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUEsSUFBQSw2QkFBQTs7QUFBQTtBQUNlLEVBQUEsc0JBQUMsSUFBRCxFQUFRLE1BQVIsR0FBQTtBQUNYLElBRFksSUFBQyxDQUFBLE9BQUQsSUFDWixDQUFBO0FBQUEsSUFEbUIsSUFBQyxDQUFBLFNBQUQsTUFDbkIsQ0FBQTtBQUFBLElBQUEsSUFBQyxDQUFBLE9BQUQsR0FBVyxJQUFDLENBQUEsSUFBSSxDQUFDLFVBQU4sQ0FBaUIsSUFBakIsQ0FBWCxDQURXO0VBQUEsQ0FBYjs7QUFBQSx5QkFHQSxNQUFBLEdBQVEsU0FBQyxDQUFELEdBQUE7QUFDTixJQUFBLENBQUEsR0FBSSxJQUFJLENBQUMsR0FBTCxDQUFTLENBQVQsRUFBWSxJQUFJLENBQUMsR0FBTCxDQUFTLENBQVQsRUFBWSxJQUFDLENBQUEsSUFBSSxDQUFDLEtBQU4sR0FBYyxDQUFDLElBQUMsQ0FBQSxNQUFNLENBQUMsTUFBUixHQUFpQixDQUFsQixDQUExQixDQUFaLENBQUosQ0FBQTtBQUFBLElBQ0EsSUFBQyxDQUFBLE9BQU8sQ0FBQyxTQUFULEdBQXFCLE1BRHJCLENBQUE7QUFBQSxJQUVBLElBQUMsQ0FBQSxPQUFPLENBQUMsUUFBVCxDQUFrQixDQUFsQixFQUFxQixDQUFyQixFQUF3QixJQUFDLENBQUEsSUFBSSxDQUFDLEtBQTlCLEVBQXFDLElBQUMsQ0FBQSxJQUFJLENBQUMsTUFBM0MsQ0FGQSxDQUFBO1dBR0EsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLENBQWdCLENBQUEsU0FBQSxLQUFBLEdBQUE7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LENBQVMsS0FBSyxDQUFDLE1BQWYsRUFBdUIsSUFBSSxDQUFDLE1BQTVCLENBSEw7TUFEK0M7RUFBQSxDQUF4QyxDQUFULENBQUE7QUFRQSxTQUFXLElBQUEsWUFBQSxDQUFhLElBQWIsRUFBbUIsTUFBbkIsQ0FBWCxDQVZ3QjtBQUFBLENBSjFCLENBQUE7O0FBQUEsTUFnQk0sQ0FBQyxZQUFQLEdBQXNCLFlBaEJ0QixDQUFBOztBQUFBLFFBa0JBLEdBQVcsU0FBQyxJQUFELEVBQU8sU0FBUCxHQUFBO0FBQ1QsTUFBQSxLQUFBO0FBQUEsRUFBQSxLQUFBLEdBQVEsU0FBQSxHQUFZLElBQXBCLENBQUE7QUFDQSxFQUFBLElBQVksS0FBQSxJQUFTLENBQXJCO0FBQUEsV0FBTyxDQUFQLENBQUE7R0FEQTtBQUdBLFNBQU8sSUFBSSxDQUFDLEtBQUwsQ0FBVyxLQUFBLEdBQVEsQ0FBbkIsQ0FBUCxDQUpTO0FBQUEsQ0FsQlgsQ0FBQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJjbGFzcyBDYW52YXNTbGlkZXJcbiAgY29uc3RydWN0b3I6IChAbm9kZSwgQGltYWdlcyktPlxuICAgIEBjb250ZXh0ID0gQG5vZGUuZ2V0Q29udGV4dCAnMmQnXG5cbiAgcmVuZGVyOiAoeCktPlxuICAgIHggPSBNYXRoLm1heCAwLCBNYXRoLm1pbiB4LCBAbm9kZS53aWR0aCAqIChAaW1hZ2VzLmxlbmd0aCAtIDEpXG4gICAgQGNvbnRleHQuZmlsbFN0eWxlID0gJ3BpbmsnXG4gICAgQGNvbnRleHQuZmlsbFJlY3QgMCwgMCwgQG5vZGUud2lkdGgsIEBub2RlLmhlaWdodFxuICAgIEBpbWFnZXMuZm9yRWFjaCAoaW1hZ2UpPT5cbiAgICAgIEBfZHJhd0ltYWdlIGltYWdlLm5vZGUsIGltYWdlLnggLSB4LCBpbWFnZS55XG5cblxuICBfZHJhd0ltYWdlOiAoaW1hZ2UsIHgsIHkpLT5cbiAgICBbeCwgd2lkdGgsIHN4XSA9IGF4aXNGaXRPbkNhbnZhcyh4LCBpbWFnZS53aWR0aCwgQG5vZGUud2lkdGgpXG4gICAgW3ksIGhlaWdodCwgc3ldID0gYXhpc0ZpdE9uQ2FudmFzKHksIGltYWdlLmhlaWdodCwgQG5vZGUuaGVpZ2h0KVxuICAgIHJldHVybiBpZiB3aWR0aCA9PSAwIG9yIGhlaWdodCA9PSAwXG5cbiAgICAjIGRyYXdJbWFnZShpbWFnZSwgc3gsIHN5LCBzV2lkdGgsIHNIZWlnaHQsIGR4LCBkeSwgZFdpZHRoLCBkSGVpZ2h0KVxuICAgIEBjb250ZXh0LmRyYXdJbWFnZShpbWFnZSwgc3gsIHN5LCB3aWR0aCwgaGVpZ2h0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICByZXR1cm5cblxuXG5heGlzRml0T25DYW52YXMgPSAocG9zaXRpb24sIHNpemUsIGF2YWlsYWJsZSktPlxuICBzb3VyY2VQb3NpdGlvbiA9IDBcbiAgaWYgcG9zaXRpb24gKyBzaXplIDwgMFxuICAgIHNpemUgPSAwXG4gIGVsc2UgaWYgcG9zaXRpb24gPCAwXG4gICAgb3ZlcmR1ZSA9IDAgLSBwb3NpdGlvblxuICAgIHNpemUgLT0gb3ZlcmR1ZVxuICAgIHNvdXJjZVBvc2l0aW9uICs9IG92ZXJkdWVcbiAgICBwb3NpdGlvbiA9IDBcbiAgZWxzZSBpZiBwb3NpdGlvbiA+IGF2YWlsYWJsZVxuICAgIHNpemUgPSAwXG4gIGVsc2UgaWYgcG9zaXRpb24gKyBzaXplID4gYXZhaWxhYmxlXG4gICAgc2l6ZSA9IGF2YWlsYWJsZSAtIHBvc2l0aW9uXG5cbiAgW3Bvc2l0aW9uLCBzaXplLCBzb3VyY2VQb3NpdGlvbl1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IENhbnZhc1NsaWRlclxuIiwiQ2FudmFzU2xpZGVyID0gcmVxdWlyZSAnLi9DYW52YXNTbGlkZXInXG5cbmNhbnZhc1NsaWRlciA9IHdpbmRvdy5jYW52YXNTbGlkZXIgfHwge31cblxuY2FudmFzU2xpZGVyLmNyZWF0ZUZyb20gPSAobm9kZSkgLT5cblxuICBpbWFnZXMgPSBBcnJheS5wcm90b3R5cGUubWFwLmNhbGwobm9kZS5jaGlsZHJlbiwgKGltYWdlLCBpbmRleCktPlxuICAgIHtcbiAgICAgIG5vZGU6IGltYWdlLFxuICAgICAgeDogKGluZGV4ICogbm9kZS53aWR0aCkgKyBjZW50ZXJlZChpbWFnZS53aWR0aCwgbm9kZS53aWR0aCksXG4gICAgICB5OiBjZW50ZXJlZChpbWFnZS5oZWlnaHQsIG5vZGUuaGVpZ2h0KVxuICAgIH1cbiAgKVxuXG4gIHJldHVybiBuZXcgQ2FudmFzU2xpZGVyKG5vZGUsIGltYWdlcylcblxud2luZG93LmNhbnZhc1NsaWRlciA9IGNhbnZhc1NsaWRlclxuXG5jZW50ZXJlZCA9IChzaXplLCBhdmFpbGFibGUpLT5cbiAgc2hvcnQgPSBhdmFpbGFibGUgLSBzaXplXG4gIHJldHVybiAwIGlmIHNob3J0IDw9IDBcblxuICByZXR1cm4gTWF0aC5mbG9vcihzaG9ydCAvIDIpXG4iXX0=

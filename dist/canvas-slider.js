(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var CanvasViewport, axisFitOnCanvas;

CanvasViewport = (function() {
  function CanvasViewport(node, images) {
    this.node = node;
    this.images = images;
    this.context = this.node.getContext('2d');
    this._setPosition(0);
  }

  CanvasViewport.prototype.render = function(x) {
    this._setPosition(x);
    this.context.fillStyle = 'pink';
    this.context.fillRect(0, 0, this.node.width, this.node.height);
    return this.images.forEach((function(_this) {
      return function(image) {
        return image.draw(_this);
      };
    })(this));
  };

  CanvasViewport.prototype.drawImage = function(image, x, y) {
    var height, ref, ref1, sx, sy, width;
    x -= this.position;
    ref = axisFitOnCanvas(x, image.width, this.node.width), x = ref[0], width = ref[1], sx = ref[2];
    ref1 = axisFitOnCanvas(y, image.height, this.node.height), y = ref1[0], height = ref1[1], sy = ref1[2];
    if (width === 0 || height === 0) {
      return;
    }
    this.context.drawImage(image, sx, sy, width, height, x, y, width, height);
  };

  CanvasViewport.prototype._setPosition = function(position) {
    position = Math.min(position, this.node.width * (this.images.length - 1));
    position = Math.max(0, position);
    return this.position = position;
  };

  return CanvasViewport;

})();

axisFitOnCanvas = function(position, size, available) {
  var overdue, sourcePosition;
  sourcePosition = 0;
  if (position + size < 0) {
    size = 0;
  } else if (position < 0) {
    overdue = 0 - position;
    size -= overdue;
    sourcePosition += overdue;
    position = 0;
  } else if (position > available) {
    size = 0;
  } else if (position + size > available) {
    size = available - position;
  }
  return [position, size, sourcePosition];
};

module.exports = CanvasViewport;



},{}],2:[function(require,module,exports){
var Image;

Image = (function() {
  function Image(node, x, y) {
    this.node = node;
    this.x = x;
    this.y = y;
  }

  Image.prototype.draw = function(viewport) {
    return viewport.drawImage(this.node, this.x, this.y);
  };

  return Image;

})();

module.exports = Image;



},{}],3:[function(require,module,exports){
var CanvasViewport, Image, centered, dragHandler, getImages;

CanvasViewport = require('./CanvasViewport');

dragHandler = require('./dragHandler');

Image = require('./Image');

module.exports = function(node) {
  var images, viewport, x;
  images = getImages(node);
  viewport = new CanvasViewport(node, images);
  x = 0;
  viewport.render(x);
  return dragHandler(node, node.ownerDocument, function(movement) {
    x += movement;
    return viewport.render(x);
  });
};

getImages = function(node) {
  return Array.prototype.map.call(node.children, function(image, index) {
    var x, y;
    x = (index * node.width) + centered(image.width, node.width);
    y = centered(image.height, node.height);
    return new Image(image, x, y);
  });
};

centered = function(size, available) {
  var short;
  short = available - size;
  if (short <= 0) {
    return 0;
  } else {
    return Math.floor(short / 2);
  }
};



},{"./CanvasViewport":1,"./Image":2,"./dragHandler":4}],4:[function(require,module,exports){
var dragHandler;

dragHandler = function(node, parentNode, cb) {
  var position, reportMovement;
  position = 0;
  node.addEventListener('mousedown', function(e) {
    parentNode.addEventListener('mousemove', reportMovement);
    position = e.clientX;
  });
  parentNode.addEventListener('mouseup', function(e) {
    parentNode.removeEventListener('mousemove', reportMovement);
  });
  return reportMovement = function(e) {
    var movement;
    movement = position - e.clientX;
    position = e.clientX;
    cb(movement);
  };
};

module.exports = dragHandler;



},{}],5:[function(require,module,exports){
var canvasSlider;

canvasSlider = require('./canvasSlider');

window.onload = function() {
  var nodes;
  nodes = document.getElementsByClassName('slider');
  return Array.prototype.forEach.call(nodes, canvasSlider);
};



},{"./canvasSlider":3}]},{},[5])
//# sourceMappingURL=data:application/json;base64,

(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var CanvasViewport, axisFitOnCanvas;

CanvasViewport = (function() {
  function CanvasViewport(node, images) {
    this.node = node;
    this.images = images;
    this.context = this.node.getContext('2d');
    this._setPosition(0);
  }

  CanvasViewport.prototype.render = function(x) {
    this._setPosition(x);
    this.context.fillStyle = 'pink';
    this.context.fillRect(0, 0, this.node.width, this.node.height);
    return this.images.forEach((function(_this) {
      return function(image) {
        return image.draw(_this);
      };
    })(this));
  };

  CanvasViewport.prototype.drawImage = function(image, x, y) {
    var height, ref, ref1, sx, sy, width;
    x -= this.position;
    ref = axisFitOnCanvas(x, image.width, this.node.width), x = ref[0], width = ref[1], sx = ref[2];
    ref1 = axisFitOnCanvas(y, image.height, this.node.height), y = ref1[0], height = ref1[1], sy = ref1[2];
    if (width === 0 || height === 0) {
      return;
    }
    this.context.drawImage(image, sx, sy, width, height, x, y, width, height);
  };

  CanvasViewport.prototype._setPosition = function(position) {
    position = Math.min(position, this.node.width * (this.images.length - 1));
    position = Math.max(0, position);
    return this.position = position;
  };

  return CanvasViewport;

})();

axisFitOnCanvas = function(position, size, available) {
  var overdue, sourcePosition;
  sourcePosition = 0;
  if (position + size < 0) {
    size = 0;
  } else if (position < 0) {
    overdue = 0 - position;
    size -= overdue;
    sourcePosition += overdue;
    position = 0;
  } else if (position > available) {
    size = 0;
  } else if (position + size > available) {
    size = available - position;
  }
  return [position, size, sourcePosition];
};

module.exports = CanvasViewport;



},{}],2:[function(require,module,exports){
var Image;

Image = (function() {
  function Image(node, x, y) {
    this.node = node;
    this.x = x;
    this.y = y;
  }

  Image.prototype.draw = function(viewport) {
    return viewport.drawImage(this.node, this.x, this.y);
  };

  return Image;

})();

module.exports = Image;



},{}],3:[function(require,module,exports){
var CanvasViewport, Image, centered;

CanvasViewport = require('./CanvasViewport');

Image = require('./Image');

window.onload = function() {
  var images, node, viewport, x;
  node = document.getElementById('slider');
  images = Array.prototype.map.call(node.children, function(image, index) {
    var x, y;
    x = (index * node.width) + centered(image.width, node.width);
    y = centered(image.height, node.height);
    return new Image(image, x, y);
  });
  viewport = new CanvasViewport(node, images);
  x = 0;
  return setInterval(function() {
    viewport.render(x);
    return x += 1;
  }, 16);
};

centered = function(size, available) {
  var short;
  short = available - size;
  if (short <= 0) {
    return 0;
  }
  return Math.floor(short / 2);
};



},{"./CanvasViewport":1,"./Image":2}]},{},[3])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9jaHJpc3RpYWFuL3RtcC9jYW52YXMtc2xpZGVyL3NyYy9DYW52YXNWaWV3cG9ydC5jb2ZmZWUiLCIvaG9tZS9jaHJpc3RpYWFuL3RtcC9jYW52YXMtc2xpZGVyL3NyYy9JbWFnZS5jb2ZmZWUiLCIvaG9tZS9jaHJpc3RpYWFuL3RtcC9jYW52YXMtc2xpZGVyL3NyYy9pbmRleC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxJQUFBLCtCQUFBOztBQUFBO0FBQ2UsRUFBQSx3QkFBQyxJQUFELEVBQVEsTUFBUixHQUFBO0FBQ1gsSUFEWSxJQUFDLENBQUEsT0FBRCxJQUNaLENBQUE7QUFBQSxJQURtQixJQUFDLENBQUEsU0FBRCxNQUNuQixDQUFBO0FBQUEsSUFBQSxJQUFDLENBQUEsT0FBRCxHQUFXLElBQUMsQ0FBQSxJQUFJLENBQUMsVUFBTixDQUFpQixJQUFqQixDQUFYLENBQUE7QUFBQSxJQUNBLElBQUMsQ0FBQSxZQUFELENBQWMsQ0FBZCxDQURBLENBRFc7RUFBQSxDQUFiOztBQUFBLDJCQUlBLE1BQUEsR0FBUSxTQUFDLENBQUQsR0FBQTtBQUNOLElBQUEsSUFBQyxDQUFBLFlBQUQsQ0FBYyxDQUFkLENBQUEsQ0FBQTtBQUFBLElBQ0EsSUFBQyxDQUFBLE9BQU8sQ0FBQyxTQUFULEdBQXFCLE1BRHJCLENBQUE7QUFBQSxJQUVBLElBQUMsQ0FBQSxPQUFPLENBQUMsUUFBVCxDQUFrQixDQUFsQixFQUFxQixDQUFyQixFQUF3QixJQUFDLENBQUEsSUFBSSxDQUFDLEtBQTlCLEVBQXFDLElBQUMsQ0FBQSxJQUFJLENBQUMsTUFBM0MsQ0FGQSxDQUFBO1dBR0EsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLENBQWdCLENBQUEsU0FBQSxLQUFBLEdBQUE7YUFBQSxTQUFDLEtBQUQsR0FBQTtlQUFVLEtB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QTtBQUNWLElBQUEsUUFBUSxDQUFDLE1BQVQsQ0FBZ0IsQ0FBaEIsQ0FBQSxDQUFBO1dBQ0EsQ0FBQSxJQUFLLEVBRks7RUFBQSxDQUFaLEVBR0UsRUFIRixFQVZjO0FBQUEsQ0FIaEIsQ0FBQTs7QUFBQSxRQWtCQSxHQUFXLFNBQUMsSUFBRCxFQUFPLFNBQVAsR0FBQTtBQUNULE1BQUEsS0FBQTtBQUFBLEVBQUEsS0FBQSxHQUFRLFNBQUEsR0FBWSxJQUFwQixDQUFBO0FBQ0EsRUFBQSxJQUFZLEtBQUEsSUFBUyxDQUFyQjtBQUFBLFdBQU8sQ0FBUCxDQUFBO0dBREE7QUFHQSxTQUFPLElBQUksQ0FBQyxLQUFMLENBQVcsS0FBQSxHQUFRLENBQW5CLENBQVAsQ0FKUztBQUFBLENBbEJYLENBQUEiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiY2xhc3MgQ2FudmFzVmlld3BvcnRcbiAgY29uc3RydWN0b3I6IChAbm9kZSwgQGltYWdlcyktPlxuICAgIEBjb250ZXh0ID0gQG5vZGUuZ2V0Q29udGV4dCAnMmQnXG4gICAgQF9zZXRQb3NpdGlvbiAwXG5cbiAgcmVuZGVyOiAoeCktPlxuICAgIEBfc2V0UG9zaXRpb24geFxuICAgIEBjb250ZXh0LmZpbGxTdHlsZSA9ICdwaW5rJ1xuICAgIEBjb250ZXh0LmZpbGxSZWN0IDAsIDAsIEBub2RlLndpZHRoLCBAbm9kZS5oZWlnaHRcbiAgICBAaW1hZ2VzLmZvckVhY2ggKGltYWdlKT0+IGltYWdlLmRyYXcodGhpcylcblxuICBkcmF3SW1hZ2U6IChpbWFnZSwgeCwgeSktPlxuICAgIHggLT0gQHBvc2l0aW9uXG4gICAgW3gsIHdpZHRoLCBzeF0gPSBheGlzRml0T25DYW52YXMoeCwgaW1hZ2Uud2lkdGgsIEBub2RlLndpZHRoKVxuICAgIFt5LCBoZWlnaHQsIHN5XSA9IGF4aXNGaXRPbkNhbnZhcyh5LCBpbWFnZS5oZWlnaHQsIEBub2RlLmhlaWdodClcbiAgICByZXR1cm4gaWYgd2lkdGggPT0gMCBvciBoZWlnaHQgPT0gMFxuXG4gICAgIyBkcmF3SW1hZ2UoaW1hZ2UsIHN4LCBzeSwgc1dpZHRoLCBzSGVpZ2h0LCBkeCwgZHksIGRXaWR0aCwgZEhlaWdodClcbiAgICBAY29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UsIHN4LCBzeSwgd2lkdGgsIGhlaWdodCwgeCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgcmV0dXJuXG5cbiAgX3NldFBvc2l0aW9uOiAocG9zaXRpb24pLT5cbiAgICBwb3NpdGlvbiA9IE1hdGgubWluIHBvc2l0aW9uLCBAbm9kZS53aWR0aCAqIChAaW1hZ2VzLmxlbmd0aCAtIDEpXG4gICAgcG9zaXRpb24gPSBNYXRoLm1heCAwLCBwb3NpdGlvblxuICAgIEBwb3NpdGlvbiA9IHBvc2l0aW9uXG5cbmF4aXNGaXRPbkNhbnZhcyA9IChwb3NpdGlvbiwgc2l6ZSwgYXZhaWxhYmxlKS0+XG4gIHNvdXJjZVBvc2l0aW9uID0gMFxuICBpZiBwb3NpdGlvbiArIHNpemUgPCAwXG4gICAgc2l6ZSA9IDBcbiAgZWxzZSBpZiBwb3NpdGlvbiA8IDBcbiAgICBvdmVyZHVlID0gMCAtIHBvc2l0aW9uXG4gICAgc2l6ZSAtPSBvdmVyZHVlXG4gICAgc291cmNlUG9zaXRpb24gKz0gb3ZlcmR1ZVxuICAgIHBvc2l0aW9uID0gMFxuICBlbHNlIGlmIHBvc2l0aW9uID4gYXZhaWxhYmxlXG4gICAgc2l6ZSA9IDBcbiAgZWxzZSBpZiBwb3NpdGlvbiArIHNpemUgPiBhdmFpbGFibGVcbiAgICBzaXplID0gYXZhaWxhYmxlIC0gcG9zaXRpb25cblxuICBbcG9zaXRpb24sIHNpemUsIHNvdXJjZVBvc2l0aW9uXVxuXG5cbm1vZHVsZS5leHBvcnRzID0gQ2FudmFzVmlld3BvcnRcbiIsImNsYXNzIEltYWdlXG4gIGNvbnN0cnVjdG9yOiAoQG5vZGUsIEB4LCBAeSktPlxuXG4gIGRyYXc6ICh2aWV3cG9ydCktPlxuICAgIHZpZXdwb3J0LmRyYXdJbWFnZShAbm9kZSwgQHgsIEB5KVxuXG5tb2R1bGUuZXhwb3J0cyA9IEltYWdlXG4iLCJDYW52YXNWaWV3cG9ydCA9IHJlcXVpcmUgJy4vQ2FudmFzVmlld3BvcnQnXG5JbWFnZSA9IHJlcXVpcmUgJy4vSW1hZ2UnXG5cbndpbmRvdy5vbmxvYWQgPSAtPlxuICBub2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NsaWRlcicpXG4gIGltYWdlcyA9IEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChub2RlLmNoaWxkcmVuLCAoaW1hZ2UsIGluZGV4KS0+XG4gICAgeCA9IChpbmRleCAqIG5vZGUud2lkdGgpICsgY2VudGVyZWQoaW1hZ2Uud2lkdGgsIG5vZGUud2lkdGgpXG4gICAgeSA9IGNlbnRlcmVkKGltYWdlLmhlaWdodCwgbm9kZS5oZWlnaHQpXG4gICAgbmV3IEltYWdlKGltYWdlLCB4LCB5KVxuICApXG5cbiAgdmlld3BvcnQgPSBuZXcgQ2FudmFzVmlld3BvcnQobm9kZSwgaW1hZ2VzKVxuICB4ID0gMFxuICBzZXRJbnRlcnZhbCAtPlxuICAgIHZpZXdwb3J0LnJlbmRlcih4KTtcbiAgICB4ICs9IDE7XG4gICwgMTZcblxuY2VudGVyZWQgPSAoc2l6ZSwgYXZhaWxhYmxlKS0+XG4gIHNob3J0ID0gYXZhaWxhYmxlIC0gc2l6ZVxuICByZXR1cm4gMCBpZiBzaG9ydCA8PSAwXG5cbiAgcmV0dXJuIE1hdGguZmxvb3Ioc2hvcnQgLyAyKVxuIl19

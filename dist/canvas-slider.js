(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var CanvasSlider, axisFitOnCanvas;

CanvasSlider = (function() {
  function CanvasSlider(node, images) {
    this.node = node;
    this.images = images;
    this.context = this.node.getContext('2d');
  }

  CanvasSlider.prototype.render = function(x) {
    this.context.clearRect(0, 0, this.node.width, this.node.height);
    return this.images.forEach((function(_this) {
      return function(image) {
        return _this._drawImage(image.node, image.x + x, image.y);
      };
    })(this));
  };

  CanvasSlider.prototype._drawImage = function(image, x, y) {
    var height, ref, ref1, sx, sy, width;
    ref = axisFitOnCanvas(x, image.width, this.node.width), x = ref[0], width = ref[1], sx = ref[2];
    ref1 = axisFitOnCanvas(y, image.height, this.node.height), y = ref1[0], height = ref1[1], sy = ref1[2];
    if (width === 0 || height === 0) {
      return;
    }
    this.context.drawImage(image, sx, sy, width, height, x, y, width, height);
  };

  return CanvasSlider;

})();

axisFitOnCanvas = function(position, size, available) {
  var overdue, sourcePosition;
  sourcePosition = 0;
  if (position + size < 0) {
    size = 0;
  } else if (position < 0) {
    overdue = 0 - position;
    size -= overdue;
    sourcePosition += overdue;
    position = 0;
  } else if (position > available) {
    size = 0;
  } else if (position + size > available) {
    size = available - position;
  }
  return [position, size, sourcePosition];
};

module.exports = CanvasSlider;



},{}],2:[function(require,module,exports){
var CanvasSlider, canvasSlider;

CanvasSlider = require('./CanvasSlider');

canvasSlider = window.canvasSlider || {};

canvasSlider.createFrom = function(node) {
  var images, slider;
  images = Array.prototype.map.call(node.children, function(image, index) {
    return {
      node: image,
      x: index * node.width,
      y: 0
    };
  });
  slider = new CanvasSlider(node, images);
  return slider.render(0);
};

window.canvasSlider = canvasSlider;



},{"./CanvasSlider":1}]},{},[2])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9jaHJpc3RpYWFuL0RvY3VtZW50ZW4vY2FudmFzLXNsaWRlci9zcmMvQ2FudmFzU2xpZGVyLmNvZmZlZSIsIi9ob21lL2NocmlzdGlhYW4vRG9jdW1lbnRlbi9jYW52YXMtc2xpZGVyL3NyYy9pbmRleC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxJQUFBLDZCQUFBOztBQUFBO0FBQ2UsRUFBQSxzQkFBQyxJQUFELEVBQVEsTUFBUixHQUFBO0FBQ1gsSUFEWSxJQUFDLENBQUEsT0FBRCxJQUNaLENBQUE7QUFBQSxJQURtQixJQUFDLENBQUEsU0FBRCxNQUNuQixDQUFBO0FBQUEsSUFBQSxJQUFDLENBQUEsT0FBRCxHQUFXLElBQUMsQ0FBQSxJQUFJLENBQUMsVUFBTixDQUFpQixJQUFqQixDQUFYLENBRFc7RUFBQSxDQUFiOztBQUFBLHlCQUdBLE1BQUEsR0FBUSxTQUFDLENBQUQsR0FBQTtBQUNOLElBQUEsSUFBQyxDQUFBLE9BQU8sQ0FBQyxTQUFULENBQW1CLENBQW5CLEVBQXNCLENBQXRCLEVBQXlCLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBL0IsRUFBc0MsSUFBQyxDQUFBLElBQUksQ0FBQyxNQUE1QyxDQUFBLENBQUE7V0FDQSxJQUFDLENBQUEsTUFBTSxDQUFDLE9BQVIsQ0FBZ0IsQ0FBQSxTQUFBLEtBQUEsR0FBQTthQUFBLFNBQUMsS0FBRCxHQUFBO2VBQ2QsS0FBQyxDQUFBLFVBQUQsQ0FBWSxLQUFLLENBQUMsSUFBbEIsRUFBd0IsS0FBSyxDQUFDLENBQU4sR0FBVSxDQUFsQyxFQUFxQyxLQUFLLENBQUMsQ0FBM0MsRUFEYztNQUFBLEVBQUE7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWhCLEVBRk07RUFBQSxDQUhSLENBQUE7O0FBQUEseUJBU0EsVUFBQSxHQUFZLFNBQUMsS0FBRCxFQUFRLENBQVIsRUFBVyxDQUFYLEdBQUE7QUFDVixRQUFBLGdDQUFBO0FBQUEsSUFBQSxNQUFpQixlQUFBLENBQWdCLENBQWhCLEVBQW1CLEtBQUssQ0FBQyxLQUF6QixFQUFnQyxJQUFDLENBQUEsSUFBSSxDQUFDLEtBQXRDLENBQWpCLEVBQUMsVUFBRCxFQUFJLGNBQUosRUFBVyxXQUFYLENBQUE7QUFBQSxJQUNBLE9BQWtCLGVBQUEsQ0FBZ0IsQ0FBaEIsRUFBbUIsS0FBSyxDQUFDLE1BQXpCLEVBQWlDLElBQUMsQ0FBQSxJQUFJLENBQUMsTUFBdkMsQ0FBbEIsRUFBQyxXQUFELEVBQUksZ0JBQUosRUFBWSxZQURaLENBQUE7QUFFQSxJQUFBLElBQVUsS0FBQSxLQUFTLENBQVQsSUFBYyxNQUFBLEtBQVUsQ0FBbEM7QUFBQSxZQUFBLENBQUE7S0FGQTtBQUFBLElBS0EsSUFBQyxDQUFBLE9BQU8sQ0FBQyxTQUFULENBQW1CLEtBQW5CLEVBQTBCLEVBQTFCLEVBQThCLEVBQTlCLEVBQWtDLEtBQWxDLEVBQXlDLE1BQXpDLEVBQWlELENBQWpELEVBQW9ELENBQXBELEVBQXVELEtBQXZELEVBQThELE1BQTlELENBTEEsQ0FEVTtFQUFBLENBVFosQ0FBQTs7c0JBQUE7O0lBREYsQ0FBQTs7QUFBQSxlQW9CQSxHQUFrQixTQUFDLFFBQUQsRUFBVyxJQUFYLEVBQWlCLFNBQWpCLEdBQUE7QUFDaEIsTUFBQSx1QkFBQTtBQUFBLEVBQUEsY0FBQSxHQUFpQixDQUFqQixDQUFBO0FBQ0EsRUFBQSxJQUFHLFFBQUEsR0FBVyxJQUFYLEdBQWtCLENBQXJCO0FBQ0UsSUFBQSxJQUFBLEdBQU8sQ0FBUCxDQURGO0dBQUEsTUFFSyxJQUFHLFFBQUEsR0FBVyxDQUFkO0FBQ0gsSUFBQSxPQUFBLEdBQVUsQ0FBQSxHQUFJLFFBQWQsQ0FBQTtBQUFBLElBQ0EsSUFBQSxJQUFRLE9BRFIsQ0FBQTtBQUFBLElBRUEsY0FBQSxJQUFrQixPQUZsQixDQUFBO0FBQUEsSUFHQSxRQUFBLEdBQVcsQ0FIWCxDQURHO0dBQUEsTUFLQSxJQUFHLFFBQUEsR0FBVyxTQUFkO0FBQ0gsSUFBQSxJQUFBLEdBQU8sQ0FBUCxDQURHO0dBQUEsTUFFQSxJQUFHLFFBQUEsR0FBVyxJQUFYLEdBQWtCLFNBQXJCO0FBQ0gsSUFBQSxJQUFBLEdBQU8sU0FBQSxHQUFZLFFBQW5CLENBREc7R0FWTDtTQWFBLENBQUMsUUFBRCxFQUFXLElBQVgsRUFBaUIsY0FBakIsRUFkZ0I7QUFBQSxDQXBCbEIsQ0FBQTs7QUFBQSxNQXFDTSxDQUFDLE9BQVAsR0FBaUIsWUFyQ2pCLENBQUE7Ozs7O0FDQUEsSUFBQSwwQkFBQTs7QUFBQSxZQUFBLEdBQWUsT0FBQSxDQUFRLGdCQUFSLENBQWYsQ0FBQTs7QUFBQSxZQUVBLEdBQWUsTUFBTSxDQUFDLFlBQVAsSUFBdUIsRUFGdEMsQ0FBQTs7QUFBQSxZQUlZLENBQUMsVUFBYixHQUEwQixTQUFDLElBQUQsR0FBQTtBQUV4QixNQUFBLGNBQUE7QUFBQSxFQUFBLE1BQUEsR0FBUyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFwQixDQUF5QixJQUFJLENBQUMsUUFBOUIsRUFBd0MsU0FBQyxLQUFELEVBQVEsS0FBUixHQUFBO1dBQy9DO0FBQUEsTUFDRSxJQUFBLEVBQU0sS0FEUjtBQUFBLE1BRUUsQ0FBQSxFQUFHLEtBQUEsR0FBUSxJQUFJLENBQUMsS0FGbEI7QUFBQSxNQUdFLENBQUEsRUFBRyxDQUhMO01BRCtDO0VBQUEsQ0FBeEMsQ0FBVCxDQUFBO0FBQUEsRUFRQSxNQUFBLEdBQWEsSUFBQSxZQUFBLENBQWEsSUFBYixFQUFtQixNQUFuQixDQVJiLENBQUE7U0FVQSxNQUFNLENBQUMsTUFBUCxDQUFjLENBQWQsRUFad0I7QUFBQSxDQUoxQixDQUFBOztBQUFBLE1Ba0JNLENBQUMsWUFBUCxHQUFzQixZQWxCdEIsQ0FBQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJjbGFzcyBDYW52YXNTbGlkZXJcbiAgY29uc3RydWN0b3I6IChAbm9kZSwgQGltYWdlcyktPlxuICAgIEBjb250ZXh0ID0gQG5vZGUuZ2V0Q29udGV4dCAnMmQnXG5cbiAgcmVuZGVyOiAoeCktPlxuICAgIEBjb250ZXh0LmNsZWFyUmVjdCAwLCAwLCBAbm9kZS53aWR0aCwgQG5vZGUuaGVpZ2h0XG4gICAgQGltYWdlcy5mb3JFYWNoIChpbWFnZSk9PlxuICAgICAgQF9kcmF3SW1hZ2UgaW1hZ2Uubm9kZSwgaW1hZ2UueCArIHgsIGltYWdlLnlcblxuXG4gIF9kcmF3SW1hZ2U6IChpbWFnZSwgeCwgeSktPlxuICAgIFt4LCB3aWR0aCwgc3hdID0gYXhpc0ZpdE9uQ2FudmFzKHgsIGltYWdlLndpZHRoLCBAbm9kZS53aWR0aClcbiAgICBbeSwgaGVpZ2h0LCBzeV0gPSBheGlzRml0T25DYW52YXMoeSwgaW1hZ2UuaGVpZ2h0LCBAbm9kZS5oZWlnaHQpXG4gICAgcmV0dXJuIGlmIHdpZHRoID09IDAgb3IgaGVpZ2h0ID09IDBcblxuICAgICMgZHJhd0ltYWdlKGltYWdlLCBzeCwgc3ksIHNXaWR0aCwgc0hlaWdodCwgZHgsIGR5LCBkV2lkdGgsIGRIZWlnaHQpXG4gICAgQGNvbnRleHQuZHJhd0ltYWdlKGltYWdlLCBzeCwgc3ksIHdpZHRoLCBoZWlnaHQsIHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgIHJldHVyblxuXG5cbmF4aXNGaXRPbkNhbnZhcyA9IChwb3NpdGlvbiwgc2l6ZSwgYXZhaWxhYmxlKS0+XG4gIHNvdXJjZVBvc2l0aW9uID0gMFxuICBpZiBwb3NpdGlvbiArIHNpemUgPCAwXG4gICAgc2l6ZSA9IDBcbiAgZWxzZSBpZiBwb3NpdGlvbiA8IDBcbiAgICBvdmVyZHVlID0gMCAtIHBvc2l0aW9uXG4gICAgc2l6ZSAtPSBvdmVyZHVlXG4gICAgc291cmNlUG9zaXRpb24gKz0gb3ZlcmR1ZVxuICAgIHBvc2l0aW9uID0gMFxuICBlbHNlIGlmIHBvc2l0aW9uID4gYXZhaWxhYmxlXG4gICAgc2l6ZSA9IDBcbiAgZWxzZSBpZiBwb3NpdGlvbiArIHNpemUgPiBhdmFpbGFibGVcbiAgICBzaXplID0gYXZhaWxhYmxlIC0gcG9zaXRpb25cblxuICBbcG9zaXRpb24sIHNpemUsIHNvdXJjZVBvc2l0aW9uXVxuXG5cbm1vZHVsZS5leHBvcnRzID0gQ2FudmFzU2xpZGVyXG4iLCJDYW52YXNTbGlkZXIgPSByZXF1aXJlICcuL0NhbnZhc1NsaWRlcidcblxuY2FudmFzU2xpZGVyID0gd2luZG93LmNhbnZhc1NsaWRlciB8fCB7fVxuXG5jYW52YXNTbGlkZXIuY3JlYXRlRnJvbSA9IChub2RlKSAtPlxuXG4gIGltYWdlcyA9IEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChub2RlLmNoaWxkcmVuLCAoaW1hZ2UsIGluZGV4KS0+XG4gICAge1xuICAgICAgbm9kZTogaW1hZ2UsXG4gICAgICB4OiBpbmRleCAqIG5vZGUud2lkdGgsXG4gICAgICB5OiAwXG4gICAgfVxuICApXG5cbiAgc2xpZGVyID0gbmV3IENhbnZhc1NsaWRlcihub2RlLCBpbWFnZXMpXG5cbiAgc2xpZGVyLnJlbmRlciAwXG5cbndpbmRvdy5jYW52YXNTbGlkZXIgPSBjYW52YXNTbGlkZXJcbiJdfQ==

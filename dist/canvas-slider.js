(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var CanvasSlider, axisFitOnCanvas;

CanvasSlider = (function() {
  function CanvasSlider(node, images) {
    this.node = node;
    this.images = images;
    this.context = this.node.getContext('2d');
  }

  CanvasSlider.prototype.render = function(x) {
    this.context.fillStyle = 'pink';
    this.context.fillRect(0, 0, this.node.width, this.node.height);
    return this.images.forEach((function(_this) {
      return function(image) {
        return _this._drawImage(image.node, image.x + x, image.y);
      };
    })(this));
  };

  CanvasSlider.prototype._drawImage = function(image, x, y) {
    var height, ref, ref1, sx, sy, width;
    ref = axisFitOnCanvas(x, image.width, this.node.width), x = ref[0], width = ref[1], sx = ref[2];
    ref1 = axisFitOnCanvas(y, image.height, this.node.height), y = ref1[0], height = ref1[1], sy = ref1[2];
    if (width === 0 || height === 0) {
      return;
    }
    this.context.drawImage(image, sx, sy, width, height, x, y, width, height);
  };

  return CanvasSlider;

})();

axisFitOnCanvas = function(position, size, available) {
  var overdue, sourcePosition;
  sourcePosition = 0;
  if (position + size < 0) {
    size = 0;
  } else if (position < 0) {
    overdue = 0 - position;
    size -= overdue;
    sourcePosition += overdue;
    position = 0;
  } else if (position > available) {
    size = 0;
  } else if (position + size > available) {
    size = available - position;
  }
  return [position, size, sourcePosition];
};

module.exports = CanvasSlider;



},{}],2:[function(require,module,exports){
var CanvasSlider, canvasSlider, centered;

CanvasSlider = require('./CanvasSlider');

canvasSlider = window.canvasSlider || {};

canvasSlider.createFrom = function(node) {
  var images;
  images = Array.prototype.map.call(node.children, function(image, index) {
    return {
      node: image,
      x: (index * node.width) + centered(image.width, node.width),
      y: centered(image.height, node.height)
    };
  });
  return new CanvasSlider(node, images);
};

window.canvasSlider = canvasSlider;

centered = function(size, available) {
  var short;
  short = available - size;
  if (short <= 0) {
    return 0;
  }
  return Math.floor(short / 2);
};



},{"./CanvasSlider":1}]},{},[2])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9jaHJpc3RpYWFuL0RvY3VtZW50ZW4vY2FudmFzLXNsaWRlci9zcmMvQ2FudmFzU2xpZGVyLmNvZmZlZSIsIi9ob21lL2NocmlzdGlhYW4vRG9jdW1lbnRlbi9jYW52YXMtc2xpZGVyL3NyYy9pbmRleC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxJQUFBLDZCQUFBOztBQUFBO0FBQ2UsRUFBQSxzQkFBQyxJQUFELEVBQVEsTUFBUixHQUFBO0FBQ1gsSUFEWSxJQUFDLENBQUEsT0FBRCxJQUNaLENBQUE7QUFBQSxJQURtQixJQUFDLENBQUEsU0FBRCxNQUNuQixDQUFBO0FBQUEsSUFBQSxJQUFDLENBQUEsT0FBRCxHQUFXLElBQUMsQ0FBQSxJQUFJLENBQUMsVUFBTixDQUFpQixJQUFqQixDQUFYLENBRFc7RUFBQSxDQUFiOztBQUFBLHlCQUdBLE1BQUEsR0FBUSxTQUFDLENBQUQsR0FBQTtBQUNOLElBQUEsSUFBQyxDQUFBLE9BQU8sQ0FBQyxTQUFULEdBQXFCLE1BQXJCLENBQUE7QUFBQSxJQUNBLElBQUMsQ0FBQSxPQUFPLENBQUMsUUFBVCxDQUFrQixDQUFsQixFQUFxQixDQUFyQixFQUF3QixJQUFDLENBQUEsSUFBSSxDQUFDLEtBQTlCLEVBQXFDLElBQUMsQ0FBQSxJQUFJLENBQUMsTUFBM0MsQ0FEQSxDQUFBO1dBRUEsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLENBQWdCLENBQUEsU0FBQSxLQUFBLEdBQUE7YUFBQSxTQUFDLEtBQUQsR0FBQTtlQUNkLEtBQUMsQ0FBQSxVQUFELENBQVksS0FBSyxDQUFDLElBQWxCLEVBQXdCLEtBQUssQ0FBQyxDQUFOLEdBQVUsQ0FBbEMsRUFBcUMsS0FBSyxDQUFDLENBQTNDLEVBRGM7TUFBQSxFQUFBO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFo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QyxZQUFQLEdBQXNCLFlBaEJ0QixDQUFBOztBQUFBLFFBa0JBLEdBQVcsU0FBQyxJQUFELEVBQU8sU0FBUCxHQUFBO0FBQ1QsTUFBQSxLQUFBO0FBQUEsRUFBQSxLQUFBLEdBQVEsU0FBQSxHQUFZLElBQXBCLENBQUE7QUFDQSxFQUFBLElBQVksS0FBQSxJQUFTLENBQXJCO0FBQUEsV0FBTyxDQUFQLENBQUE7R0FEQTtBQUdBLFNBQU8sSUFBSSxDQUFDLEtBQUwsQ0FBVyxLQUFBLEdBQVEsQ0FBbkIsQ0FBUCxDQUpTO0FBQUEsQ0FsQlgsQ0FBQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJjbGFzcyBDYW52YXNTbGlkZXJcbiAgY29uc3RydWN0b3I6IChAbm9kZSwgQGltYWdlcyktPlxuICAgIEBjb250ZXh0ID0gQG5vZGUuZ2V0Q29udGV4dCAnMmQnXG5cbiAgcmVuZGVyOiAoeCktPlxuICAgIEBjb250ZXh0LmZpbGxTdHlsZSA9ICdwaW5rJ1xuICAgIEBjb250ZXh0LmZpbGxSZWN0IDAsIDAsIEBub2RlLndpZHRoLCBAbm9kZS5oZWlnaHRcbiAgICBAaW1hZ2VzLmZvckVhY2ggKGltYWdlKT0+XG4gICAgICBAX2RyYXdJbWFnZSBpbWFnZS5ub2RlLCBpbWFnZS54ICsgeCwgaW1hZ2UueVxuXG5cbiAgX2RyYXdJbWFnZTogKGltYWdlLCB4LCB5KS0+XG4gICAgW3gsIHdpZHRoLCBzeF0gPSBheGlzRml0T25DYW52YXMoeCwgaW1hZ2Uud2lkdGgsIEBub2RlLndpZHRoKVxuICAgIFt5LCBoZWlnaHQsIHN5XSA9IGF4aXNGaXRPbkNhbnZhcyh5LCBpbWFnZS5oZWlnaHQsIEBub2RlLmhlaWdodClcbiAgICByZXR1cm4gaWYgd2lkdGggPT0gMCBvciBoZWlnaHQgPT0gMFxuXG4gICAgIyBkcmF3SW1hZ2UoaW1hZ2UsIHN4LCBzeSwgc1dpZHRoLCBzSGVpZ2h0LCBkeCwgZHksIGRXaWR0aCwgZEhlaWdodClcbiAgICBAY29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UsIHN4LCBzeSwgd2lkdGgsIGhlaWdodCwgeCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgcmV0dXJuXG5cblxuYXhpc0ZpdE9uQ2FudmFzID0gKHBvc2l0aW9uLCBzaXplLCBhdmFpbGFibGUpLT5cbiAgc291cmNlUG9zaXRpb24gPSAwXG4gIGlmIHBvc2l0aW9uICsgc2l6ZSA8IDBcbiAgICBzaXplID0gMFxuICBlbHNlIGlmIHBvc2l0aW9uIDwgMFxuICAgIG92ZXJkdWUgPSAwIC0gcG9zaXRpb25cbiAgICBzaXplIC09IG92ZXJkdWVcbiAgICBzb3VyY2VQb3NpdGlvbiArPSBvdmVyZHVlXG4gICAgcG9zaXRpb24gPSAwXG4gIGVsc2UgaWYgcG9zaXRpb24gPiBhdmFpbGFibGVcbiAgICBzaXplID0gMFxuICBlbHNlIGlmIHBvc2l0aW9uICsgc2l6ZSA+IGF2YWlsYWJsZVxuICAgIHNpemUgPSBhdmFpbGFibGUgLSBwb3NpdGlvblxuXG4gIFtwb3NpdGlvbiwgc2l6ZSwgc291cmNlUG9zaXRpb25dXG5cblxubW9kdWxlLmV4cG9ydHMgPSBDYW52YXNTbGlkZXJcbiIsIkNhbnZhc1NsaWRlciA9IHJlcXVpcmUgJy4vQ2FudmFzU2xpZGVyJ1xuXG5jYW52YXNTbGlkZXIgPSB3aW5kb3cuY2FudmFzU2xpZGVyIHx8IHt9XG5cbmNhbnZhc1NsaWRlci5jcmVhdGVGcm9tID0gKG5vZGUpIC0+XG5cbiAgaW1hZ2VzID0gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKG5vZGUuY2hpbGRyZW4sIChpbWFnZSwgaW5kZXgpLT5cbiAgICB7XG4gICAgICBub2RlOiBpbWFnZSxcbiAgICAgIHg6IChpbmRleCAqIG5vZGUud2lkdGgpICsgY2VudGVyZWQoaW1hZ2Uud2lkdGgsIG5vZGUud2lkdGgpLFxuICAgICAgeTogY2VudGVyZWQoaW1hZ2UuaGVpZ2h0LCBub2RlLmhlaWdodClcbiAgICB9XG4gIClcblxuICByZXR1cm4gbmV3IENhbnZhc1NsaWRlcihub2RlLCBpbWFnZXMpXG5cbndpbmRvdy5jYW52YXNTbGlkZXIgPSBjYW52YXNTbGlkZXJcblxuY2VudGVyZWQgPSAoc2l6ZSwgYXZhaWxhYmxlKS0+XG4gIHNob3J0ID0gYXZhaWxhYmxlIC0gc2l6ZVxuICByZXR1cm4gMCBpZiBzaG9ydCA8PSAwXG5cbiAgcmV0dXJuIE1hdGguZmxvb3Ioc2hvcnQgLyAyKVxuIl19
